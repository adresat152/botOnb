import telebot
import requests
import json

try:
    # python2
    from urlparse import urlparse
except ModuleNotFoundError:
    # python3
    from urllib.parse import urlparse

    #–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ URl
def url_validator(x):
    try:
        result = urlparse(x)
        return all([result.scheme, result.netloc])
    except AttributeError:
        return False
    
from telebot import types;
bot = telebot.TeleBot('6647975314:AAFjVYqLhFLyIfuNZlRji_n4X2UU381g-r0');

#–û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
host = '';
client_id = '';
client_secret = '';
grant_type = 'client_credentials';
scope = 'read write';
restId = '';
orderId = '';
rep = ''; #–û—Ç–≤–µ—Ç response
admin = [883820247, 1108841817, 5403424801, 884863244, 757210002]
textCreds = '';
headers = '';

def pusin(host, client_id, client_secret, restId, orderId):
    global textCreds
    textCreds = "–Ø –≤—Å–µ –∑–∞–ø–∏—Å–∞–ª!\nHost: "+host+"\nClinet ID: "+client_id+"\nClient Secret: "+client_secret+"\nRestID: "+restId+"\n–ó–∞–∫–∞–∑: "+orderId

helloWorld = '–ü—Ä–∏–≤–µ—Ç, {0.first_name}!\n\n–≠—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —É–∑–∫–æ–º—É –∫—Ä—É–≥—É –ª–∏—Ü.'


#–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
def getToken(message):
    url = host+'/security/oauth/token'
    data = {
        'client_id': client_id,
        'client_secret': client_secret,
        'grant_type': grant_type,
        'scope': scope
    }
    if url_validator(host) == True:
        response = requests.post(url, data=data)
        if response.status_code == 400:
            print (response.status_code)
            bot.send_message(message.chat.id, text="‚ùå–£–ø—Å! –û—à–∏–±–∫–∞ 400... –ü–æ—Ö–æ–∂–µ –Ω–µ–≤–µ—Ä–Ω—ã–µ –∫—Ä–µ–¥—ã —É —Ç–µ–±—è, –¥—Ä—É–∂–æ–∫")
        elif response.status_code == 404:
            print (response.status_code)
            bot.send_message(message.chat.id, text="‚ùå–¢—É—Ç —É–∂–µ 404 –æ—à–∏–±–∫–∞. –ß—Ç–æ-—Ç–æ —Å —Ö–æ—Å—Ç–æ–º. –°—Ç—É—á–∏–º—Å—è –Ω–µ —Ç—É–¥–∞...")
        elif response.status_code == 401:
            print (response.status_code)
            bot.send_message(message.chat.id, text="‚ùå–û—à–∏–±–∫–∞ 401 –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –•–æ—Å—Ç –û–ö, —Å–º–æ—Ç—Ä–∏ Client ID –∏ Secret")
        else:
            global rep
            rep = response
            authToken = rep.json()['access_token']
            global headers
            headers = {'Authorization': 'Bearer '+authToken}
            return True
    else:
        bot.send_message(message.chat.id, text="–•–æ—Å—Ç –≤–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω–æ...")

#–§—É–Ω–∫—Ü–∏—è –≤—ã–≥—Ä—É–∑–∫–∏ —á–µ–≥–æ-—Ç–æ –≤ —Ñ–∞–π–ª
def getFile(message):
    with open('place/file.json', 'w', encoding='utf-8') as outfile:  
        json.dump(rep.json(), outfile, ensure_ascii=False, sort_keys=True, indent=4)
    with open('place/file.txt', 'w', encoding='utf-8') as outfile:  
        json.dump(rep.json(), outfile, ensure_ascii=False)
    global file_json
    global file_txt
    file_json = open('place/file.json', 'rb')
    file_txt = open('place/file.txt', 'rb')

def getMenuCreds(message):
    pusin(host=host, client_id=client_id, client_secret=client_secret, restId=restId, orderId=orderId) #–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–µ–¥—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∑–∞–≤–æ–¥–∏—Ç –ø–æ–¥ –æ–¥–Ω—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å —Ç–µ–∫—Å—Ç–æ–º
    bot.send_message(message.chat.id, text=textCreds, reply_markup=types.ReplyKeyboardRemove()) #–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å —Ç–µ–∫—Å—Ç–æ–º
    keyboard = telebot.types.InlineKeyboardMarkup()
    button_place = telebot.types.InlineKeyboardButton(text="–†–µ—Å—Ç–æ—Ä–∞–Ω—ã", callback_data='load_place')
    button_menu = telebot.types.InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data='load_menu')
    button_order = telebot.types.InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='load_order')
    keyboard.add(button_place, button_menu, button_order)
    bot.send_message(message.chat.id, f'–ß—Ç–æ —Å–º–æ—Ç—Ä–∏–º –ø–æ –∫—Ä–µ–¥–∞–º?', reply_markup=keyboard)

#–°—Ç–∞—Ä—Ç –±–æ—Ç–∞:
@bot.message_handler(commands=['start'])
def start(message):
    if message.from_user.id in admin:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        menuButton = types.KeyboardButton("–ú–µ–Ω—é –±–æ—Ç–∞")
        markup.add(menuButton)
        bot.send_message(message.chat.id, text=helloWorld.format(message.from_user), reply_markup=markup)
    else:
        print(message.from_user.id)
        bot.send_message(message.chat.id, text=helloWorld.format(message.from_user))
        bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞', reply_markup=types.ReplyKeyboardRemove())

        
@bot.message_handler(content_types=['text'])
def menu(message):
    if message.from_user.id in admin:
        if(message.text == "–ú–µ–Ω—é –±–æ—Ç–∞"):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            credsButton = types.KeyboardButton("–í–≤–µ—Å—Ç–∏ –∫—Ä–µ–¥—ã üì•")
            back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            markup.add(credsButton, back)
            bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏ —á—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º", reply_markup=markup)
            bot.register_next_step_handler(message, creds);
    else:
        bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞', reply_markup=types.ReplyKeyboardRemove())


@bot.message_handler(content_types=['text'])
def creds(message):
    if message.from_user.id in admin:
        if(message.text == "–í–≤–µ—Å—Ç–∏ –∫—Ä–µ–¥—ã üì•"):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            skip = types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
            markup.add(skip)
            bot.send_message(message.chat.id, text="–í–≤–µ–¥–∏ Host", reply_markup=markup)
            bot.register_next_step_handler(message, get_cliet_id);
    else:
        bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞', reply_markup=types.ReplyKeyboardRemove())

#–ó–∞–ø–∏—Å—ã–≤–∞–µ–º host –∏ –ø–æ–ª—É—á–∞–µ–º Client ID
def get_cliet_id(message):
    global host
    host = message.text
    checkHost = host[-1]
    if checkHost == '/':
        host = host[:-1]
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    markup.add(button1)
    bot.send_message(message.chat.id, text="–í–≤–µ–¥–∏ Client ID", reply_markup=markup)
    bot.register_next_step_handler(message, get_cliet_secret);
#–ó–∞–ø–∏—Å—ã–≤–∞–µ–º client_id –∏ –ø–æ–ª—É—á–∞–µ–º Client Secret
def get_cliet_secret(message):
    global client_id
    client_id = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    markup.add(button1)
    bot.send_message(message.chat.id, text="–í–≤–µ–¥–∏ Client Secret", reply_markup=markup)
    bot.register_next_step_handler(message, saveCreds);
# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º Secret –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–µ–¥—ã
def saveCreds(message):
    global client_secret
    client_secret = message.text
    if host == '':
        bot.send_message(message.chat.id, text="–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫—Ä–µ–¥—ã")
    else:
        #–†–µ—Å—Ç–æ—Ä–∞–Ω—ã
        @bot.callback_query_handler(func=lambda call: call.data == 'load_place')
        def save_btn(call):
            message = call.message
            chat_id = message.chat.id
            message_id = message.message_id  
            bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–ü–æ–ª—É—á–∞—é —Ç–æ–∫–µ–Ω...')
            getToken(message)
            bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–¢–æ–∫–µ–Ω –ø–æ–ª—É—á–∏–ª, –ø—Ä–æ–≤–µ—Ä—è—é —Ö–æ—Å—Ç...')
            global rep
            rep = requests.get(host+'/restaurants', headers=headers)
            if rep.status_code == 404:
                bot.send_message(message.chat.id, text="–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤. \n\n–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å Goulash.tech. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ ID —Ç–µ—Ä–º–∏–Ω–∞–ª–∞.")
            else:
                @bot.callback_query_handler(func=lambda call: call.data == 'load_in_chat')
                def save_btn(call):
                    message = call.message
                    chat_id = message.chat.id
                    message_id = message.message_id  
                    bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–í—Å–µ –æ–∫, –¥–µ—Ä–∂–∏ —Å–ø–∏—Å–æ–∫ ‚úÖ')
                    for txt in responseRest['places']:
                        idRest = txt['id']
                        titleRest = txt['title']
                        adressRest = txt['address']
                        bot.send_message(message.chat.id, idRest+'\n'+titleRest+'\n'+adressRest)
                    getMenuCreds(message)

                @bot.callback_query_handler(func=lambda call: call.data == 'load_file')
                def save_btn(call):
                    message = call.message
                    chat_id = message.chat.id
                    message_id = message.message_id  
                    bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª...')
                    getFile(message)
                    bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...')
                    bot.send_document(chat_id, file_json);
                    bot.send_document(chat_id, file_txt);
                    getMenuCreds(message)
                
                global responseRest
                responseRest = rep.json()
                lenRest = len(responseRest['places'])
                if lenRest >= 15:
                    keyboard = telebot.types.InlineKeyboardMarkup()
                    button_in_chat = telebot.types.InlineKeyboardButton(text="–í—ã–≥—Ä—É–∑–∏—Ç—å", callback_data='load_in_chat')
                    button_file = telebot.types.InlineKeyboardButton(text="–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", callback_data='load_file')
                    keyboard.add(button_in_chat, button_file)
                    bot.send_message(message.chat.id, f'–°–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ–≤ –ø—Ä–∏–≤—ã—à–∞–µ—Ç 15 –Ω–∞ –∫—Ä–µ–¥–∞—Ö. –í—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ?', reply_markup=keyboard)
                else:
                    bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–í—Å–µ –æ–∫, –¥–µ—Ä–∂–∏ —Å–ø–∏—Å–æ–∫ ‚úÖ')
                    for txt in responseRest['places']:
                        idRest = txt['id']
                        titleRest = txt['title']
                        adressRest = txt['address']
                        bot.send_message(message.chat.id, idRest+'\n'+titleRest+'\n'+adressRest)
                    getMenuCreds(message)
        
        #–ú–µ–Ω—é
        @bot.callback_query_handler(func=lambda call: call.data == 'load_menu')
        def save_btn(call):
            def Get_id_rest(message):
                bot.send_message(message.chat.id, text="–í–≤–µ–¥–∏ ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞")
                bot.register_next_step_handler(message, download_rest);
            def download_rest(message):
                global restId
                restId = message.text
                global rep
                rep = requests.get(host+'/menu/'+restId+"/composition", headers=headers)
                responseMenu = rep.json()
                if len(responseMenu) == 1:
                    bot.send_message(message.chat.id, text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –í–æ–∑–º–æ–∂–Ω–æ –Ω–µ–≤–µ—Ä–Ω—ã–π ID —Ç–µ—Ä–º–∏–Ω–∞–ª–∞\n–û—à–∏–±–∫–∞:")
                    bot.send_message(message.chat.id, text=str(responseMenu), parse_mode='html')
                else:
                    @bot.callback_query_handler(func=lambda call: call.data == 'load_in_chat_menu')
                    def save_btn(call):
                        message = call.message
                        chat_id = message.chat.id
                        message_id = message.message_id  
                        bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–í—Å–µ –æ–∫, –¥–µ—Ä–∂–∏ —Å–ø–∏—Å–æ–∫ ‚úÖ')
                        for txt in responseMenu['items']:
                            NamePos = txt['name']
                            DesPos = txt['description']
                            PricePos = txt['price']
                            MeaUnitPos = txt['measureUnit']
                            if len(txt['images']) > 0:
                                ImgPos = txt['images'][0]['url']
                            else:
                                ImgPos = txt['images']
                            bot.send_message(message.chat.id, NamePos+'\n'+DesPos+'\n'+str(PricePos)+'\n'+MeaUnitPos+'\n'+str(ImgPos))
                        getMenuCreds(message);
                    @bot.callback_query_handler(func=lambda call: call.data == 'load_file_menu')
                    def save_btn(call):
                        message = call.message
                        chat_id = message.chat.id
                        message_id = message.message_id  
                        bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª...')
                        getFile(message)
                        bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...')
                        bot.send_document(chat_id, file_json);
                        bot.send_document(chat_id, file_txt);
                        getMenuCreds(message);
                    
                    if len (responseMenu['items']) > 10:
                        keyboard = telebot.types.InlineKeyboardMarkup()
                        button_in_chat = telebot.types.InlineKeyboardButton(text="–í—ã–≥—Ä—É–∑–∏—Ç—å", callback_data='load_in_chat_menu')
                        button_file = telebot.types.InlineKeyboardButton(text="–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", callback_data='load_file_menu')
                        keyboard.add(button_in_chat, button_file)
                        bot.send_message(message.chat.id, f'–°–ø–∏—Å–æ–∫ –±–ª—é–¥ –ø—Ä–∏–≤—ã—à–∞–µ—Ç 10. –í—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ?', reply_markup=keyboard)
                    else:
                        for txt in responseMenu['items']:
                            NamePos = txt['name']
                            DesPos = txt['description']
                            PricePos = txt['price']
                            MeaUnitPos = txt['measureUnit']
                            if len(txt['images']) > 0:
                                ImgPos = txt['images'][0]['url']
                            else:
                                ImgPos = txt['images']
                            bot.send_message(message.chat.id, NamePos+'\n'+DesPos+'\n'+str(PricePos)+'\n'+MeaUnitPos+'\n'+str(ImgPos))
                        getMenuCreds(message)

            message = call.message
            chat_id = message.chat.id
            message_id = message.message_id  
            bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–≥—Ä—É–∑–∫–∞ –º–µ–Ω—é')
            bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–ü–æ–ª—É—á–∞—é —Ç–æ–∫–µ–Ω...')
            getToken(message)
            bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–¢–æ–∫–µ–Ω –ø–æ–ª—É—á–∏–ª, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞')
            bot.register_next_step_handler(message, Get_id_rest);
        
        #–ó–∞–∫–∞–∑—ã
        @bot.callback_query_handler(func=lambda call: call.data == 'load_order')
        def save_btn(call):
            def Get_order(message):
                bot.register_next_step_handler(message, download_order);
            def download_order(message):
                @bot.callback_query_handler(func=lambda call: call.data == 'yes_status')
                def save_btn(call):
                    bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–ü–æ–ª—É—á–∞—é —Ç–æ–∫–µ–Ω...')
                    getToken(message)
                    rep = requests.get(host+'/order/'+orderId+'/status', headers=headers)
                    responseOrder = rep.json()
                    bot.send_message(message.chat.id, text=str(responseOrder))
                    getMenuCreds(message)
                @bot.callback_query_handler(func=lambda call: call.data == 'no_status')
                def save_btn(call):
                    getMenuCreds(message)
                global orderId
                orderId = message.text
                global rep
                rep = requests.get(host+'/order/'+orderId, headers=headers)
                responseOrder = rep.json()
                bot.send_message(message.chat.id, text=str(responseOrder))
                keyboard = telebot.types.InlineKeyboardMarkup()
                button_yes_status = telebot.types.InlineKeyboardButton(text="–î–∞", callback_data='yes_status')
                button_no_status = telebot.types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data='no_status')
                keyboard.add(button_yes_status, button_no_status)
                bot.send_message(message.chat.id, f'–í—ã–≥—Ä—É–∑–∏—Ç—å –µ–≥–æ —Å—Ç–∞—Ç—É—Å —É –ø–∞—Ä—Ç–Ω–µ—Ä–∞?', reply_markup=keyboard)
            message = call.message
            chat_id = message.chat.id
            message_id = message.message_id  
            bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–ü–æ–ª—É—á–∞—é —Ç–æ–∫–µ–Ω...')
            getToken(message)
            bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–¢–æ–∫–µ–Ω –ø–æ–ª—É—á–∏–ª, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞')
            bot.register_next_step_handler(message, Get_order);
        
        if getToken(message) == True:
            pusin(host=host, client_id=client_id, client_secret=client_secret, restId=restId, orderId=orderId) #–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–µ–¥—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∑–∞–≤–æ–¥–∏—Ç –ø–æ–¥ –æ–¥–Ω—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å —Ç–µ–∫—Å—Ç–æ–º
            bot.send_message(message.chat.id, text=textCreds, reply_markup=types.ReplyKeyboardRemove()) #–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å —Ç–µ–∫—Å—Ç–æ–º
            keyboard = telebot.types.InlineKeyboardMarkup()
            button_place = telebot.types.InlineKeyboardButton(text="–†–µ—Å—Ç–æ—Ä–∞–Ω—ã", callback_data='load_place')
            button_menu = telebot.types.InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data='load_menu')
            button_order = telebot.types.InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='load_order')
            keyboard.add(button_place, button_menu, button_order)
            bot.send_message(message.chat.id, f'–ß—Ç–æ —Å–º–æ—Ç—Ä–∏–º –ø–æ –∫—Ä–µ–¥–∞–º?', reply_markup=keyboard)
        else:
            bot.send_message(message.chat.id, f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ù–∞—á–Ω–µ–º —Å –Ω–∞—á–∞–ª–∞ /start')


bot.polling()