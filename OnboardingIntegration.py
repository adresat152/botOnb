import telebot
import requests
import json

try:
    # python2
    from urlparse import urlparse
except ModuleNotFoundError:
    # python3
    from urllib.parse import urlparse


#–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ URl
def url_validator(x):
    try:
        result = urlparse(x)
        return all([result.scheme, result.netloc])
    except AttributeError:
        return False


#–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É –ø–æ —Ç–æ–∫–µ–Ω—É
from telebot import types;
bot = telebot.TeleBot('6647975314:AAFjVYqLhFLyIfuNZlRji_n4X2UU381g-r0');

admin = [883820247, 1108841817, 5403424801, 884863244, 757210002]


#–û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–π
responseMenu = '';
responseRest = '';
host = '';
client_id = '';
client_secret = '';
grant_type = 'client_credentials';
scope = 'read write';
restId = '';
orderId = '';
response = '';

urlRest = host+'/restaurants'
urlMenu = host+'/menu/'+restId+'/composition'

def getToken(message):
    global response
    url = host+'/security/oauth/token'
    data = {
        'client_id': client_id,
        'client_secret': client_secret,
        'grant_type': grant_type,
        'scope': scope
    }
    response = requests.post(url, data=data)
    if response.status_code == 400:
        print (response.status_code)
        bot.send_message(message.chat.id, text="‚ùå–£–ø—Å! –û—à–∏–±–∫–∞ 400... –ü–æ—Ö–æ–∂–µ –Ω–µ–≤–µ—Ä–Ω—ã–µ –∫—Ä–µ–¥—ã —É —Ç–µ–±—è, –¥—Ä—É–∂–æ–∫")
    elif response.status_code == 404:
        print (response.status_code)
        bot.send_message(message.chat.id, text="‚ùå–¢—É—Ç —É–∂–µ 404 –æ—à–∏–±–∫–∞. –ß—Ç–æ-—Ç–æ —Å —Ö–æ—Å—Ç–æ–º. –°—Ç—É—á–∏–º—Å—è –Ω–µ —Ç—É–¥–∞...")
    elif response.status_code == 401:
        print (response.status_code)
        bot.send_message(message.chat.id, text="‚ùå–û—à–∏–±–∫–∞ 401 –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –•–æ—Å—Ç –û–ö, —Å–º–æ—Ç—Ä–∏ Client ID –∏ Secret")
    else:
        response = requests.post(url, data=data)
        bot.send_message(message.chat.id, text="–ö—Ä–µ–¥—ã –ø—Ä–æ–≤–µ—Ä–∏–ª, –≤—Å–µ –æ–∫")


@bot.message_handler(commands=['start'])
def start(message):
    if message.from_user.id in admin:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
        btn2 = types.KeyboardButton("–ú–µ–Ω—é –±–æ—Ç–∞")
        markup.add(btn1, btn2)
        bot.send_message(message.chat.id, text="–ü—Ä–∏–≤–µ—Ç, {0.first_name}!\n\n–≠—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —É–∑–∫–æ–º—É –∫—Ä—É–≥—É –ª–∏—Ü.".format(message.from_user), reply_markup=markup)
    else:
        print(message.from_user.id)
        bot.send_message(message.chat.id, text="–ü—Ä–∏–≤–µ—Ç, {0.first_name}!\n\n–≠—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —É–∑–∫–æ–º—É –∫—Ä—É–≥—É –ª–∏—Ü.".format(message.from_user))
        bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞', reply_markup=types.ReplyKeyboardRemove())
@bot.message_handler(content_types=['text'])
def func(message):
    if message.from_user.id in admin:
        if(message.text == "üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è"):
            bot.send_message(message.chat.id, text="–ü—Ä–∏–≤–µ–µ—Ç.. –Ø —Å–æ–∑–¥–∞–Ω –Ω–µ–Ω–æ—Ä–º–∞–ª—å–Ω—ã–º —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–æ–º!")

        #–ú–µ–Ω—é –±–æ—Ç–∞
        elif(message.text == "–ú–µ–Ω—é –±–æ—Ç–∞"):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton("–í–≤–µ—Å—Ç–∏ –∫—Ä–µ–¥—ã üì•")
            btn2 = types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å Place'—ã üè†")
            btn3 = types.KeyboardButton("–í—ã–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é üìã")
            back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            markup.add(btn1, btn2, btn3, back)
            bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏ —á—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º", reply_markup=markup)
        #–í–≤–µ—Å—Ç–∏ –∫—Ä–µ–¥—ã
        elif(message.text == "–í–≤–µ—Å—Ç–∏ –∫—Ä–µ–¥—ã üì•"):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button1 = types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
            markup.add(button1)
            bot.send_message(message.chat.id, text="–í–≤–µ–¥–∏ Host\n\n–°–ë–ò–°: api.sbis.ru/web-hook/req/yandex_food/new_host/[...]\nIikoWeb: [...].iikoweb.ru/api/integrations/yandex-food\n–ò –¥—Ä—É–≥–∏–µ...", reply_markup=markup)
            bot.register_next_step_handler(message, get_cliet_id);
            
        #–í—ã–≥—Ä—É–∑–∫–∞ –†–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤

        elif message.text == "–ü–æ–ª—É—á–∏—Ç—å Place'—ã üè†":
            if url_validator(host) == True:
                #–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ + –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å—ã response
                if host == '':
                    bot.send_message(message.chat.id, text="–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫—Ä–µ–¥—ã")
                else:
                    url = host+'/security/oauth/token'
                    data = {
                        'client_id': client_id,
                        'client_secret': client_secret,
                        'grant_type': grant_type,
                        'scope': scope
                    }
                    response = requests.post(url, data=data)
                    if response.status_code == 400:
                        print (response.status_code)
                        bot.send_message(message.chat.id, text="‚ùå–£–ø—Å! –û—à–∏–±–∫–∞ 400... –ü–æ—Ö–æ–∂–µ –Ω–µ–≤–µ—Ä–Ω—ã–µ –∫—Ä–µ–¥—ã —É —Ç–µ–±—è, –¥—Ä—É–∂–æ–∫")
                    elif response.status_code == 404:
                        print (response.status_code)
                        bot.send_message(message.chat.id, text="‚ùå–¢—É—Ç —É–∂–µ 404 –æ—à–∏–±–∫–∞. –ß—Ç–æ-—Ç–æ —Å —Ö–æ—Å—Ç–æ–º. –°—Ç—É—á–∏–º—Å—è –Ω–µ —Ç—É–¥–∞...")
                    elif response.status_code == 401:
                        print (response.status_code)
                        bot.send_message(message.chat.id, text="‚ùå–û—à–∏–±–∫–∞ 401 –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –•–æ—Å—Ç –û–ö, —Å–º–æ—Ç—Ä–∏ Client ID –∏ Secret")
                    else:
                        #–í—ã–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ–≤ –ø–æ —Ç–æ–∫–µ–Ω—É –ø–æ–ª—É—á–µ–Ω–Ω–æ–º—É –≤—ã—à–µ
                        AuthResponse = response.json()
                        accessToken = AuthResponse['access_token']

                        headers = {'Authorization': 'Bearer '+accessToken}
                        response = requests.get(host+'/restaurants', headers=headers)
                        if response.status_code == 404:
                            bot.send_message(message.chat.id, text="–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤. \n\n–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å Goulash.tech. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ ID —Ç–µ—Ä–º–∏–Ω–∞–ª–∞.")
                        else: 
                            global responseRest
                            responseRest = response.json()
                            lenRest = len(responseRest['places'])
                            if lenRest > 15:
                                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                                button1 = types.KeyboardButton("–î–∞")
                                button2 = types.KeyboardButton("–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª")
                                markup.add(button1,button2)
                                bot.send_message(message.chat.id, text="–ö–æ–ª-–≤–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –Ω–∞ –∫—Ä–µ–¥–∞—Ö –ø—Ä–µ–≤—ã—à–∞–µ—Ç 15 —à—Ç—É–∫. –í—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ? –ò—Ö –∫–æ–ª-–≤–æ: "+str(lenRest), reply_markup=markup)
                                bot.register_next_step_handler(message, download_places);
                            else:
                                for txt in responseRest['places']:
                                        idRest = txt['id']
                                        titleRest = txt['title']
                                        adressRest = txt['address']
                                        bot.send_message(message.chat.id, idRest+'\n'+titleRest+'\n'+adressRest)
            else:
                bot.send_message(message.chat.id, text="–•–æ—Å—Ç –≤–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω–æ")


        #–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

        elif (message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
            button2 = types.KeyboardButton("–ú–µ–Ω—é –±–æ—Ç–∞")
            markup.add(button1, button2)
            bot.send_message(message.chat.id, text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)

        #–í—ã–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é

        elif (message.text == "–í—ã–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é üìã"):
            bot.send_message(message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ ID —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ (–ü–æ–∫–∞ –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)")
            bot.register_next_step_handler(message, get_menu_by_RestID);
        #–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
        elif message.text == "–ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑":
            getToken(message)
        else:
            bot.send_message(message.chat.id, text="–ù–∞ —Ç–∞–∫—É—é –∫–æ–º–º–∞–Ω–¥—É —è –Ω–µ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω.. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ /start")
    else:
        bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞', reply_markup=types.ReplyKeyboardRemove())

#–®–∞–≥–∏ –∑–∞–ø–∏—Å–∏ –∫—Ä–µ–¥–æ–≤

def get_cliet_id(message): #–ó–∞–ø–∏—Å—ã–≤–∞–µ–º host –∏ –ø–æ–ª—É—á–∞–µ–º Client ID
    global host
    host = message.text
    checkHost = host[-1]
    if checkHost == '/':
        host = host[:-1]
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    markup.add(button1)
    bot.send_message(message.chat.id, text="–í–≤–µ–¥–∏ Client ID", reply_markup=markup)
    bot.register_next_step_handler(message, get_cliet_secret);

def get_cliet_secret(message): #–ó–∞–ø–∏—Å—ã–≤–∞–µ–º client_id –∏ –ø–æ–ª—É—á–∞–µ–º Client Secret
    global client_id
    client_id = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    markup.add(button1)
    bot.send_message(message.chat.id, text="–í–≤–µ–¥–∏ Client Secret", reply_markup=markup)
    bot.register_next_step_handler(message, saveCreds);

def saveCreds(message): # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º Secret –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–µ–¥—ã
    global client_secret
    client_secret = message.text
    if host == '':
        bot.send_message(message.chat.id, text="–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫—Ä–µ–¥—ã")
    else:
        url = host+'/security/oauth/token'
        data = {
            'client_id': client_id,
            'client_secret': client_secret,
            'grant_type': grant_type,
            'scope': scope
        }
        if url_validator(host) == True:
            response = requests.post(url, data=data)
            if response.status_code == 400:
                print (response.status_code)
                bot.send_message(message.chat.id, text="‚ùå–£–ø—Å! –û—à–∏–±–∫–∞ 400... –ü–æ—Ö–æ–∂–µ –Ω–µ–≤–µ—Ä–Ω—ã–µ –∫—Ä–µ–¥—ã —É —Ç–µ–±—è, –¥—Ä—É–∂–æ–∫")
            elif response.status_code == 404:
                print (response.status_code)
                bot.send_message(message.chat.id, text="‚ùå–¢—É—Ç —É–∂–µ 404 –æ—à–∏–±–∫–∞. –ß—Ç–æ-—Ç–æ —Å —Ö–æ—Å—Ç–æ–º. –°—Ç—É—á–∏–º—Å—è –Ω–µ —Ç—É–¥–∞...")
            elif response.status_code == 401:
                print (response.status_code)
                bot.send_message(message.chat.id, text="‚ùå–û—à–∏–±–∫–∞ 401 –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –•–æ—Å—Ç –û–ö, —Å–º–æ—Ç—Ä–∏ Client ID –∏ Secret")
            else:
                bot.send_message(message.chat.id, text="‚úÖ–°—Ç–∞—Ç—É—Å 200. –ö—Ä–µ–¥—ã –æ–∫‚úÖ")
        else: 
            bot.send_message(message.chat.id, text="–•–æ—Å—Ç –≤–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω–æ")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–í–≤–µ—Å—Ç–∏ –∫—Ä–µ–¥—ã üì•")
        btn2 = types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å Place'—ã üè†")
        btn3 = types.KeyboardButton("–í—ã–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é üìã")
        back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(btn1, btn2, btn3, back)
        bot.send_message(message.chat.id, text="–Ø –≤—Å–µ –∑–∞–ø–∏—Å–∞–ª!\nHost: "+host+"\nClinet ID: "+client_id+"\nClient Secret: "+client_secret+"\nRestID: "+restId+"\n–ó–∞–∫–∞–∑: "+orderId+"\n\n–ú–æ–∂–Ω–æ –≤—ã–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é –ø–æ –∫–Ω–æ–ø–∫–µ", reply_markup=markup)

#–®–∞–≥ –≤—ã–≥—Ä—É–∑–∫–∏ –ø–ª–µ–π—Å–æ–≤
def download_places(message):
    if message.text == "–î–∞":
        for txt in responseRest['places']:
            idRest = txt['id']
            titleRest = txt['title']
            adressRest = txt['address']
            bot.send_message(message.chat.id, idRest+'\n'+titleRest+'\n'+adressRest)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–í–≤–µ—Å—Ç–∏ –∫—Ä–µ–¥—ã üì•")
        btn2 = types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å Place'—ã üè†")
        btn3 = types.KeyboardButton("–í—ã–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é üìã")
        back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(btn1, btn2, btn3, back)
        bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏ —á—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º", reply_markup=markup)
    else:
        if host == '':
            bot.send_message(message.chat.id, text="–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫—Ä–µ–¥—ã")
        else:
            url = host+'/security/oauth/token'
            data = {
                'client_id': client_id,
                'client_secret': client_secret,
                'grant_type': grant_type,
                'scope': scope
            }
            response = requests.post(url, data=data)
            AuthResponse = response.json()
            accessToken = AuthResponse['access_token']
            headers = {'Authorization': 'Bearer '+accessToken}
            response = requests.get(host+'/restaurants', headers=headers)
            with open('place/place.json', 'w', encoding='utf-8') as outfile:  
                json.dump(response.json(), outfile, ensure_ascii=False, sort_keys=True, indent=4)
            with open('place/place.txt', 'w') as outfile:  
                json.dump(response.json(), outfile, ensure_ascii=False, )
            place_json = open('place/place.json', 'rb')
            place_txt = open('place/place.txt', 'rb')
            bot.send_document(message.from_user.id, place_txt);
            bot.send_document(message.from_user.id, place_json);
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–í–≤–µ—Å—Ç–∏ –∫—Ä–µ–¥—ã üì•")
        btn2 = types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å Place'—ã üè†")
        btn3 = types.KeyboardButton("–í—ã–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é üìã")
        back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(btn1, btn2, btn3, back)
        bot.send_message(message.chat.id, text="–Ø –≤—Å–µ –∑–∞–ø–∏—Å–∞–ª!\nHost: "+host+"\nClinet ID: "+client_id+"\nClient Secret: "+client_secret+"\nRestID: "+restId+"\n–ó–∞–∫–∞–∑: "+orderId+"\n\n–ú–æ–∂–Ω–æ –≤—ã–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é –ø–æ –∫–Ω–æ–ø–∫–µ", reply_markup=markup)


def get_menu_by_RestID(message):
    global restId
    restId = message.text
    #–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    if host == '':
        bot.send_message(message.chat.id, text="–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫—Ä–µ–¥—ã")
    else:
        if url_validator(host) == True:
            url = host+'/security/oauth/token'
            data = {
                'client_id': client_id,
                'client_secret': client_secret,
                'grant_type': grant_type,
                'scope': scope
            }
            response = requests.post(url, data=data)
            AuthResponse = response.json()
            accessToken = AuthResponse['access_token']
            headers = {'Authorization': 'Bearer '+accessToken}
            urlMenu = host+'/menu/'+restId+'/composition'
            response = requests.get(urlMenu, headers=headers)
            global responseMenu
            responseMenu = response.json()
            if len(responseMenu) == 1:
                bot.send_message(message.chat.id, text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –í–æ–∑–º–æ–∂–Ω–æ –Ω–µ–≤–µ—Ä–Ω—ã–π ID —Ç–µ—Ä–º–∏–Ω–∞–ª–∞\n–û—à–∏–±–∫–∞:")
                bot.send_message(message.chat.id, text=str(responseMenu), parse_mode='html')
            else:
                lenMenu = len(responseMenu['items'])
                if lenMenu > 10:
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    button1 = types.KeyboardButton("–î–∞")
                    button2 = types.KeyboardButton("–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª")
                    markup.add(button1,button2)
                    bot.send_message(message.chat.id, text="–ö–æ–ª-–≤–æ –±–ª—é–¥ –Ω–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 10 —à—Ç—É–∫. –í—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ? –û–±—â–Ω–Ω –∫–æ–ª-–≤–æ: "+str(lenMenu), reply_markup=markup)
                    bot.register_next_step_handler(message, download_menu);
                else:
                    for txt in responseMenu['items']:
                            NamePos = txt['name']
                            DesPos = txt['description']
                            PricePos = txt['price']
                            MeaUnitPos = txt['measureUnit']
                            if len(txt['images']) > 0:
                                ImgPos = txt['images'][0]['url']
                            else:
                                ImgPos = txt['images']
                            bot.send_message(message.chat.id, NamePos+'\n'+DesPos+'\n'+str(PricePos)+'\n'+MeaUnitPos+'\n'+str(ImgPos))
        else:
            bot.send_message(message.chat.id, text="–•–æ—Å—Ç –≤–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω–æ")


def download_menu(message):
    if message.text == "–î–∞":
        for txt in responseMenu['items']:
            NamePos = txt['name']
            DesPos = txt['description']
            PricePos = txt['price']
            MeaUnitPos = txt['measureUnit']
            if len(txt['images']) > 0:
                ImgPos = txt['images'][0]['url']
            else:
                ImgPos = txt['images']
            bot.send_message(message.chat.id, NamePos+'\n'+DesPos+'\n'+str(PricePos)+'\n'+MeaUnitPos+'\n'+str(ImgPos))
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton("–í–≤–µ—Å—Ç–∏ –∫—Ä–µ–¥—ã üì•")
            btn2 = types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å Place'—ã üè†")
            btn3 = types.KeyboardButton("–í—ã–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é üìã")
            back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            markup.add(btn1, btn2, btn3, back)
    else:
        url = host+'/security/oauth/token'
        data = {
            'client_id': client_id,
            'client_secret': client_secret,
            'grant_type': grant_type,
            'scope': scope
        }
        response = requests.post(url, data=data)
        AuthResponse = response.json()
        accessToken = AuthResponse['access_token']
        headers = {'Authorization': 'Bearer '+accessToken}
        response = requests.get(host+'/menu/'+restId+'/composition', headers=headers)
        with open('menu/menu.json', 'w', encoding='utf-8') as outfile:  
            json.dump(response.json(), outfile, ensure_ascii=False, sort_keys=True, indent=4)
        with open('menu/menu.txt', 'w') as outfile:  
            json.dump(response.json(), outfile, ensure_ascii=False, )
        menu_json = open('menu/menu.json', 'rb')
        menu_txt = open('menu/menu.txt', 'rb')
        bot.send_document(message.from_user.id, menu_txt);
        bot.send_document(message.from_user.id, menu_json);
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–í–≤–µ—Å—Ç–∏ –∫—Ä–µ–¥—ã üì•")
    btn2 = types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å Place'—ã üè†")
    btn3 = types.KeyboardButton("–í—ã–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é üìã")
    back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(btn1, btn2, btn3, back)
    bot.send_message(message.chat.id, text="–Ø –≤—Å–µ –∑–∞–ø–∏—Å–∞–ª!\nHost: "+host+"\nClinet ID: "+client_id+"\nClient Secret: "+client_secret+"\nRestID: "+restId+"\n–ó–∞–∫–∞–∑: "+orderId+"\n\n–ú–æ–∂–Ω–æ –≤—ã–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é –ø–æ –∫–Ω–æ–ø–∫–µ", reply_markup=markup)
    


# def telegram_polling():
#     try:
#         bot.polling()
#     except:
#         bot
#         traceback_error_string=traceback.format_exc()
#         with open("Error.Log", "a") as myfile:
#             myfile.write("\r\n\r\n" + time.strftime("%c")+"\r\n<<ERROR polling>>\r\n"+ traceback_error_string + "\r\n<<ERROR polling>>")
#         bot.stop_polling()
#         time.sleep(10)
#         telegram_polling()

# telegram_polling()
bot.polling()